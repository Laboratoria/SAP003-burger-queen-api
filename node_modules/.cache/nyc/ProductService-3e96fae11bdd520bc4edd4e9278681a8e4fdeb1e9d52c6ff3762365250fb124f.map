{"version":3,"sources":["ProductService.js"],"names":["ProductService","database","Product","findAll","newProduct","create","id","updateProduct","findOne","where","Number","productToUpdate","update","theProduct","productToDelete","destroy","deletedProduct"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,c;;;;;;;;;;;;;;;;;;;uBAGaC,mBAASC,OAAT,CAAiBC,OAAjB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMOC,U;;;;;;;uBAEPH,mBAASC,OAAT,CAAiBG,MAAjB,CAAwBD,UAAxB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMUE,E,EAAIC,c;;;;;;;;uBAEGN,mBAASC,OAAT,CAAiBM,OAAjB,CAAyB;AACrDC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD8C,iBAAzB,C;;;AAAxBK,gBAAAA,e;;qBAIFA,e;;;;;;uBACIV,mBAASC,OAAT,CAAiBU,MAAjB,CAAwBL,cAAxB,EAAuC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAvC,C;;;kDAECC,c;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMaD,E;;;;;;;;uBAEKL,mBAASC,OAAT,CAAiBM,OAAjB,CAAyB;AAChDC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADyC,iBAAzB,C;;;AAAnBO,gBAAAA,U;kDAICA,U;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMgBP,E;;;;;;;;uBAEOL,mBAASC,OAAT,CAAiBM,OAAjB,CAAyB;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAzB,C;;;AAAxBQ,gBAAAA,e;;qBAEFA,e;;;;;;uBAC2Bb,mBAASC,OAAT,CAAiBa,OAAjB,CAAyB;AACpDN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD6C,iBAAzB,C;;;AAAvBU,gBAAAA,c;kDAGCA,c;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOEhB,c","sourceRoot":"/app/api/server/services","sourcesContent":["import database from '../src/models'\n\nclass ProductService {\n  static async getAllProducts() {\n    try {\n      return await database.Product.findAll()\n    } catch (error) {\n      throw error\n    }\n  }\n\n  static async addProduct(newProduct) {\n    try {\n      return await database.Product.create(newProduct)\n    } catch (error) {\n      throw error\n    }\n  }\n\n  static async updateProduct(id, updateProduct) {\n    try {\n      const productToUpdate = await database.Product.findOne({\n        where: { id: Number(id) }\n      })\n\n      if (productToUpdate) {\n        await database.Product.update(updateProduct, { where: { id: Number(id) } })\n\n        return updateProduct\n      }\n      return null\n    } catch (error) {\n      throw error\n    }\n  }\n\n  static async getProduct(id) {\n    try {\n      const theProduct = await database.Product.findOne({\n        where: { id: Number(id) }\n      })\n\n      return theProduct\n    } catch (error) {\n      throw error\n    }\n  }\n\n  static async deleteProduct(id) {\n    try {\n      const productToDelete = await database.Product.findOne({ where: { id: Number(id) } })\n\n      if (productToDelete) {\n        const deletedProduct = await database.Product.destroy({\n          where: { id: Number(id) }\n        })\n        return deletedProduct\n      }\n      return null\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\nexport default ProductService"]}